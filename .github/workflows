name: Update Hacktoberfest 2024 Leaderboard

on:
  pull_request:
    types: [closed]

jobs:
  update-leaderboard:
    if: github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'hacktoberfest-accepted')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set issue URL
        run: |
          # Provide the leaderboard issue link directly here
          issue_url="https://github.com/example-org/leaderboard-repo/issues/42"  # Replace this with your actual issue link

          # Extract repository and issue number from the URL
          repo=$(echo "$issue_url" | sed -E 's|https://github.com/([^/]+/[^/]+)/.*|\1|')
          issue_number=$(echo "$issue_url" | sed -E 's|.*/issues/([0-9]+)|\1|')

          echo "repo=$repo" >> $GITHUB_ENV
          echo "issue_number=$issue_number" >> $GITHUB_ENV

      - name: Extract contributor and labels
        id: extract_contributor_labels
        run: |
          contributor=$(jq -r '.pull_request.user.login' "$GITHUB_EVENT_PATH")
          labels=$(jq -r '.pull_request.labels[].name' "$GITHUB_EVENT_PATH")
          
          if echo "$labels" | grep -q "small"; then
            points=5
          elif echo "$labels" | grep -q "medium"; then
            points=10
          elif echo "$labels" | grep -q "large"; then
            points=15
          else
            echo "No valid label found"
            exit 1
          fi

          echo "contributor=$contributor" >> $GITHUB_ENV
          echo "points=$points" >> $GITHUB_ENV

      - name: Update points in the leaderboard issue
        run: |
          leaderboard_content=$(gh issue view $issue_number --repo $repo --json body -q '.body')

          # Add the contributor points to the leaderboard or update their points if they already exist
          updated_leaderboard=$(echo "$leaderboard_content" | python3 -c "
import sys
leaderboard = sys.stdin.read()

contributor = '$contributor'
points = int('$points')

table_start = leaderboard.find('| Rank |')
table_end = leaderboard.find('\n\n', table_start)

# Extract the table
table = leaderboard[table_start:table_end].strip().splitlines()

# Parse existing ranks
rankings = []
for row in table[2:]:  # Skip header
    cols = row.split('|')
    rank = int(cols[1].strip())
    user = cols[2].strip()
    score = int(cols[3].strip())
    rankings.append((rank, user, score))

# Update points
updated = False
for i, (rank, user, score) in enumerate(rankings):
    if user == contributor:
        rankings[i] = (rank, user, score + points)
        updated = True
        break

if not updated:
    rankings.append((len(rankings) + 1, contributor, points))

# Sort by points, descending
rankings = sorted(rankings, key=lambda x: -x[2])

# Re-rank
rankings = [(i+1, user, score) for i, (_, user, score) in enumerate(rankings)]

# Create updated table
new_table = ['| Rank | Contributor | Points |']
new_table.append('| --- | --- | --- |')
for rank, user, score in rankings:
    new_table.append(f'| {rank} | {user} | {score} |')

# Replace the old table with the new one
leaderboard = leaderboard[:table_start] + '\n'.join(new_table) + leaderboard[table_end:]
print(leaderboard)
")

          # Update the GitHub issue in the target repository with the new leaderboard
          gh issue edit $issue_number --repo $repo --body "$updated_leaderboard"
